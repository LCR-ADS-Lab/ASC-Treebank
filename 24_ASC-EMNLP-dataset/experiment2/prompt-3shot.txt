task_description = """
You are tasked with annotating English argument structure constructions (ASCs) in sentences.
Your role is to assign one of seven different ASC labels to verbs that form ASCs in each sentence:
(1) transitive simple (TRAN_S),
(2) transitive resultative (TRAN_RES),
(3) caused-motion (CAUS_MOT),
(4) intransitive simple (INTRAN_S),
(5) intransitive motion (INTRAN_MOT),
(6) intransitive resultative (INTRAN_RES),
(7) ditransitive (DITRAN).
Tag only the labels. Note that a sentence may contain multiple ASCs.
Please format your annotations in a simplified CoNLL-U format.
For each word in the sentence, list its order number, the word itself, and its label if it is a verb participating in an ASC; otherwise, use an underscore (_).
The followings are some annotated examples.

# text = The urge to gather them all in is almost overwhelming, and makes me more grateful
1	The	_
2	urge	_
3	to	_
4	and	_
5	gather	CAUS_MOT
6	them	_
7	all	_
8	in	_
9	is
10	almost	_
11	overwhelming	_
12	,	_
13	and	_
14	makes	TRAN_RES
15	me	_
16	more	_
17	grateful	_

# text = that would help cut popular support off from jihadis attempting to convert Kashmir into a second Afghanistan.
1	that	_
2	would	_
3	help	TRAN_S
4	cut	TRAN_RES
5	popular	_
6	support	_
7	off	_
8	from	_
9	jihadis	_
10	attempting	TRAN_S
11	to	_
12	convert	TRAN_RES
13	Kashmir	_
14	into	_
15	a	_
16	second	_
17	Afghanistan	_
18	.	_

# text = I go to Camp California in the USA and I give you further information .
1	I	_
2	go	INTRAN_MOT
3	to	_
4	Camp	_
5	California	_
6	in	_
7	the	_
8	USA	_
9	and	_
10	I	_
11	give	DITRAN
12	you	_
13	further	_
14	information	_
15	.	_

# text = I will give you the information which you asked me in your letter
1	I	_
2	will	_
3	give	DITRAN
4	you	_
5	the	_
6	information	_
7	which	_
8	you	_
9	asked	DITRAN
10	me	_
11	in	_
12	your	_
13	letter	_

# text = We not only borrow books from liabrary but also study at liabrary .
1	We	_
2	not	_
3	only	_
4	borrow	CAUS_MOT
5	books	_
6	from	_
7	liabrary	_
8	but	_
9	also	_
10	study	INTRAN_S
11	at	_
12	liabrary	_
13	.	_

# text = I suggest you should go by train and go out in the Museum Station .
1	I	_
2	suggest	TRAN_S
3	you	_
4	should	_
5	go	INTRAN_S
6	by	_
7	train	_
8	and	_
9	go	INTRAN_MOT
10	out	_
11	in	_
12	the	_
13	Museum	_
14	Station	_
15	.	_

# text = If an egg turns blue, it had died and then became dyed as the outer membrane broke down.
1	If	_
2	an	_
3	egg	_
4	turns	INTRAN_RES
5	blue	_
6	,	_
7	it	_
8	had	_
9	died	INTRAN_S
10	and	_
11	then	_
12	became	INTRAN_RES
13	dyed	_
14	as	_
15	the	_
16	outer	_
17	membrane	_
18	broke	INTRAN_RES
19	down	_
20	.	_

# text = my wife's taste ran to lemonade and less spicy fare.
1	my	_
2	wife	_
3	's	_
4	taste	_
5	ran	INTRAN_MOT
6	to	_
7	lemonade	_
8	and	_
9	less	_
10	spicy	_
11	fare	_
12	.	_

# text = he does not call you back by Friday
1	he	_
2	does	_
3	not	_
4	call	CAUS_MOT
5	you	_
6	back	_
7	by	_
8	friday	_

Please annotate the following sentence:
"""

# Read sentences from the input file
with open('sentences.txt', 'r') as file:
    sentences = file.readlines()

# Initialize an output list to store results
annotated_sentences = []

# Process each sentence
for sentence in sentences:
    sentence = sentence.strip()  # Clean up the sentence
    if not sentence:  # Skip empty lines
        continue
    complete_prompt = task_description + '"' + sentence + '"'
    # Make an API call to the OpenAI model
    response = openai.ChatCompletion.create(
        model="gpt-4",  # specify the correct chat model
        messages=[
            {"role": "user", "content": complete_prompt}
        ],
        max_tokens=300,  # Adjust token limit based on expected output length
        temperature=0.3
    )

    # Collect the response
    annotated_output = response['choices'][0]['message']['content'].strip()
    annotated_sentences.append("# text = " + sentence + "\n" + annotated_output + "\n")

# Save the output to a .txt file
with open('gpt-4-3shot-non-05071310.txt', 'w') as file:
    file.write('\n'.join(annotated_sentences))
    print("Annotated sentences saved to output_conllu.txt")